// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CinemaServiceClient is the client API for CinemaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CinemaServiceClient interface {
	GetCinema(ctx context.Context, in *GetCinemaRequest, opts ...grpc.CallOption) (*CinemaResponse, error)
	UpdateCinema(ctx context.Context, in *CinemaConfig, opts ...grpc.CallOption) (*CinemaResponse, error)
	QueryAvailableSeats(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	ReserveSeats(ctx context.Context, in *ReservationRequest, opts ...grpc.CallOption) (*ReservationResponse, error)
	CancelReservation(ctx context.Context, in *CancellationRequest, opts ...grpc.CallOption) (*CancellationResponse, error)
}

type cinemaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCinemaServiceClient(cc grpc.ClientConnInterface) CinemaServiceClient {
	return &cinemaServiceClient{cc}
}

func (c *cinemaServiceClient) GetCinema(ctx context.Context, in *GetCinemaRequest, opts ...grpc.CallOption) (*CinemaResponse, error) {
	out := new(CinemaResponse)
	err := c.cc.Invoke(ctx, "/cinema.CinemaService/GetCinema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaServiceClient) UpdateCinema(ctx context.Context, in *CinemaConfig, opts ...grpc.CallOption) (*CinemaResponse, error) {
	out := new(CinemaResponse)
	err := c.cc.Invoke(ctx, "/cinema.CinemaService/UpdateCinema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaServiceClient) QueryAvailableSeats(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/cinema.CinemaService/QueryAvailableSeats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaServiceClient) ReserveSeats(ctx context.Context, in *ReservationRequest, opts ...grpc.CallOption) (*ReservationResponse, error) {
	out := new(ReservationResponse)
	err := c.cc.Invoke(ctx, "/cinema.CinemaService/ReserveSeats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaServiceClient) CancelReservation(ctx context.Context, in *CancellationRequest, opts ...grpc.CallOption) (*CancellationResponse, error) {
	out := new(CancellationResponse)
	err := c.cc.Invoke(ctx, "/cinema.CinemaService/CancelReservation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CinemaServiceServer is the server API for CinemaService service.
// All implementations must embed UnimplementedCinemaServiceServer
// for forward compatibility
type CinemaServiceServer interface {
	GetCinema(context.Context, *GetCinemaRequest) (*CinemaResponse, error)
	UpdateCinema(context.Context, *CinemaConfig) (*CinemaResponse, error)
	QueryAvailableSeats(context.Context, *QueryRequest) (*QueryResponse, error)
	ReserveSeats(context.Context, *ReservationRequest) (*ReservationResponse, error)
	CancelReservation(context.Context, *CancellationRequest) (*CancellationResponse, error)
	mustEmbedUnimplementedCinemaServiceServer()
}

// UnimplementedCinemaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCinemaServiceServer struct {
}

func (UnimplementedCinemaServiceServer) GetCinema(context.Context, *GetCinemaRequest) (*CinemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCinema not implemented")
}
func (UnimplementedCinemaServiceServer) UpdateCinema(context.Context, *CinemaConfig) (*CinemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCinema not implemented")
}
func (UnimplementedCinemaServiceServer) QueryAvailableSeats(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAvailableSeats not implemented")
}
func (UnimplementedCinemaServiceServer) ReserveSeats(context.Context, *ReservationRequest) (*ReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveSeats not implemented")
}
func (UnimplementedCinemaServiceServer) CancelReservation(context.Context, *CancellationRequest) (*CancellationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelReservation not implemented")
}
func (UnimplementedCinemaServiceServer) mustEmbedUnimplementedCinemaServiceServer() {}

// UnsafeCinemaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CinemaServiceServer will
// result in compilation errors.
type UnsafeCinemaServiceServer interface {
	mustEmbedUnimplementedCinemaServiceServer()
}

func RegisterCinemaServiceServer(s grpc.ServiceRegistrar, srv CinemaServiceServer) {
	s.RegisterService(&CinemaService_ServiceDesc, srv)
}

func _CinemaService_GetCinema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCinemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaServiceServer).GetCinema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cinema.CinemaService/GetCinema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaServiceServer).GetCinema(ctx, req.(*GetCinemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaService_UpdateCinema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CinemaConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaServiceServer).UpdateCinema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cinema.CinemaService/UpdateCinema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaServiceServer).UpdateCinema(ctx, req.(*CinemaConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaService_QueryAvailableSeats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaServiceServer).QueryAvailableSeats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cinema.CinemaService/QueryAvailableSeats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaServiceServer).QueryAvailableSeats(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaService_ReserveSeats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaServiceServer).ReserveSeats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cinema.CinemaService/ReserveSeats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaServiceServer).ReserveSeats(ctx, req.(*ReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaService_CancelReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancellationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaServiceServer).CancelReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cinema.CinemaService/CancelReservation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaServiceServer).CancelReservation(ctx, req.(*CancellationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CinemaService_ServiceDesc is the grpc.ServiceDesc for CinemaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CinemaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cinema.CinemaService",
	HandlerType: (*CinemaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCinema",
			Handler:    _CinemaService_GetCinema_Handler,
		},
		{
			MethodName: "UpdateCinema",
			Handler:    _CinemaService_UpdateCinema_Handler,
		},
		{
			MethodName: "QueryAvailableSeats",
			Handler:    _CinemaService_QueryAvailableSeats_Handler,
		},
		{
			MethodName: "ReserveSeats",
			Handler:    _CinemaService_ReserveSeats_Handler,
		},
		{
			MethodName: "CancelReservation",
			Handler:    _CinemaService_CancelReservation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cinema_service.proto",
}
